#!/bin/bash
#==================================================================================================
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# This file is a part of the Armbian for Amlogic TV Boxes
# https://github.com/ophub/amlogic-s9xxx-armbian
#
# Function: Armbian kernel update
# Copyright (C) 2021- https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021- https://github.com/ophub/amlogic-s9xxx-armbian
#
# Kernel download server: https://github.com/ophub/kernel/tree/main/pub
#
# Command: armbian-update
# Command optional parameters: armbian-update <kernel_version> <version_branch> <mainline_u-boot>
# The mainline u-boot is installed by default: armbian-update
# Don't write mainline u-boot command: armbian-update 5.4.170 stable no
#
#========================================= Functions list =========================================
#
# error_msg          : Output error message
# check_depends      : Check dependencies
# get_textoffset     : Get kernel TEXT_OFFSET
# init_var           : Initialize all variables
# download_kernel    : Download the kernel
# check_kernel       : Check kernel files list
# update_kernel      : Update the kernel
# update_uboot       : Update the uboot
#
#===================================== Set default parameters =====================================
#
# Set the kernel download path
tmp_path="${PWD}"
# Set the kernel download repository
kernel_repo="https://github.com/ophub/kernel/tree/main/pub"
# Set default kernel branch
kernel_branch=("stable" "dev")
version_branch="stable"
# Set the release check file
ophub_release_file="/etc/ophub-release"
# Set default installation mainline u-boot
auto_mainline_uboot="yes"
#
# Set font color
STEPS="[\033[95m STEPS \033[0m]"
INFO="[\033[94m INFO \033[0m]"
SUCCESS="[\033[92m SUCCESS \033[0m]"
FINISH="[\033[93m FINISH \033[0m]"
ERROR="[\033[91m ERROR \033[0m]"
#
#==================================================================================================

# Encountered a serious error, abort the script execution
error_msg() {
    echo -e "${ERROR} ${1}"
    exit 1
}

# Check dependencies
check_depends() {
    is_missing="0"
    necessary_packages=("subversion" "tar" "coreutils")
    i="1"
    for package in ${necessary_packages[*]}; do
        [[ -n "$(dpkg -l | grep "${package}")" ]] || is_missing="1"
        let i++
    done

    if [[ "${is_missing}" -eq "1" ]]; then
        echo -e "${STEPS} Start installing the necessary dependencies..."
        sudo apt-get update
        sudo apt-get install -y ${necessary_packages[*]}
    fi
}

# Get kernel TEXT_OFFSET, For u-boot.ext and u-boot.emmc
get_textoffset() {
    boot_tgz_file="${1}"
    vmlinuz_name="${2}"
    K510="1"
    temp_dir="$(mktemp -d)"
    (
        cd ${temp_dir}
        tar -xzf "${boot_tgz_file}" "${vmlinuz_name}"
    )
    # With TEXT_OFFSET patch is [ 0108 ], without TEXT_OFFSET patch is [ 0000 ]
    [[ "$(hexdump -n 15 -x "${temp_dir}/${vmlinuz_name}" 2>/dev/null | head -n 1 | awk '{print $7}')" == "0108" ]] && K510="0"
}

# Initialize all variables
init_var() {
    cd ${tmp_path}
    echo -e "${STEPS} Start initializing the environment..."

    # Specify the kernel, such as: 5.10.70
    [[ -n "${1}" ]] && inputs_kernel="${1}"

    # Specify version branch, such as: stable
    [[ -n "${2}" && -n "$(echo "${kernel_branch[@]}" | grep -w "${2}")" ]] && version_branch="${2}"

    # Specify whether to brush into the mainline u-boot, such as: yes
    [[ "${3}" == "no" ]] && auto_mainline_uboot="no"

    # Convert kernel library address to svn format
    [[ "${kernel_repo}" == http* && -n "$(echo "${kernel_repo}" | grep "tree/main")" ]] && kernel_repo="${kernel_repo//tree\/main/trunk}"
    kernel_repo="${kernel_repo}/${version_branch}"

    # Convert kernel library address to API format
    kernel_api="${kernel_repo#*com\/}"
    kernel_api="${kernel_api//trunk/contents}"
    kernel_api="https://api.github.com/repos/${kernel_api}"

    # Check release file
    if [[ -f "${ophub_release_file}" ]]; then
        source "${ophub_release_file}" 2>/dev/null
        UBOOT_OVERLOAD="${UBOOT_OVERLOAD}"
        MAINLINE_UBOOT="${MAINLINE_UBOOT}"
        ANDROID_UBOOT="${ANDROID_UBOOT}"
    else
        error_msg "${ophub_release_file} file is missing!"
    fi

    # Find the partition where root is located
    ROOT_PTNAME="$(df / | tail -n1 | awk '{print $1}' | awk -F '/' '{print $3}')"
    [[ -z "${ROOT_PTNAME}" ]] && error_msg "Cannot find the partition corresponding to the root file system!"

    # Find the disk where the partition is located, only supports mmcblk?p? sd?? hd?? vd?? and other formats
    case "${ROOT_PTNAME}" in
    mmcblk?p[1-4])
        EMMC_NAME="$(echo ${ROOT_PTNAME} | awk '{print substr($1, 1, length($1)-2)}')"
        ;;
    [hsv]d[a-z][1-4])
        EMMC_NAME="$(echo ${ROOT_PTNAME} | awk '{print substr($1, 1, length($1)-1)}')"
        ;;
    *)
        error_msg "Unable to recognize the disk type of ${ROOT_PTNAME}!"
        ;;
    esac
    DEV_EMMC="/dev/${EMMC_NAME}"
}

# Download the kernel
download_kernel() {
    cd ${tmp_path}

    # The local kernel file is preferred, followed by the specified version, and finally the latest version of the same series is used
    if [[ "$(ls *.tar.gz -l 2>/dev/null | grep "^-" | wc -l)" -ge "4" ]]; then
        try_boot="$(ls boot-*.tar.gz 2>/dev/null | head -n 1 | grep -oE '[1-9].[0-9]{1,3}.[0-9]+')"
        [[ -n "${try_boot}" ]] && inputs_kernel="${try_boot}" && echo -e "${STEPS} Use local kernel files: ${inputs_kernel}"
    else
        # Query the current version
        current_kernel="$(echo "$(uname -r)" | grep -oE '^[1-9].[0-9]{1,3}.[0-9]+')"
        [[ -z "${current_kernel}" ]] && error_msg "Failed to query the current kernel version."
        # kernel_verpatch, such as [ 5.10 ]
        kernel_verpatch="$(echo ${current_kernel} | awk -F '.' '{print $1"."$2}')"

        # Automatically query the latest kernel version
        if [[ -z "${inputs_kernel}" ]]; then
            latest_version="$(curl -s "${kernel_api}" | grep "name" | grep -oE "${kernel_verpatch}.[0-9]+" | sed -e "s/${kernel_verpatch}.//g" | sort -n | sed -n '$p')"
            #latest_version="160"
            [[ ! -z "${latest_version}" ]] || error_msg "Failed to get the version on the server."
            echo -e "${INFO} Current version: ${current_kernel}, Latest version: ${kernel_verpatch}.${latest_version}"
            inputs_kernel="${kernel_verpatch}.${latest_version}"
        fi

        # version comparison
        [[ "${current_kernel}" == "${inputs_kernel}" ]] && echo -e "${FINISH} Already the latest version, no need to update." && exit 0

        # Delete tmp files
        rm -f *${inputs_kernel}*.tar.gz sha256sums 2>/dev/null && sync

        # Download kernel
        echo -e "${STEPS} Start downloading the kernel from [ ${kernel_repo/trunk/tree\/main}/${inputs_kernel} ]..."
        svn export ${kernel_repo}/${inputs_kernel} ${tmp_path} --force
        [[ "${?}" -ne "0" ]] && error_msg "Kernel download failed."
    fi

    sync && echo ""
}

# Check kernel files list
check_kernel() {
    cd ${tmp_path}
    echo -e "${STEPS} Start checking the kernel..."

    # Determine custom kernel filename
    kernel_boot="$(ls boot-${inputs_kernel}-*.tar.gz 2>/dev/null | head -n 1)"
    kernel_name="${kernel_boot/boot-/}" && kernel_name="${kernel_name/.tar.gz/}"
    KERNEL_VERSION="$(echo ${kernel_name} | grep -oE '^[1-9].[0-9]{1,3}.[0-9]+')"
    echo -e "${INFO} Kernel name: [ ${kernel_name} ]"

    # Check if the file is added with TEXT_OFFSET patch
    get_textoffset "${tmp_path}/${kernel_boot}" "vmlinuz-${kernel_name}"
    echo -e "${INFO} K510: [ ${K510} ]"
    if [[ "${K510}" -eq "1" ]]; then
        [[ -n "${UBOOT_OVERLOAD}" && -f "/boot/${UBOOT_OVERLOAD}" ]] || error_msg "The UBOOT_OVERLOAD file is missing and cannot be update."
    fi

    # Check the sha256sums file
    sha256sums_file="sha256sums"
    sha256sums_check="1"
    [[ -s "${sha256sums_file}" && -n "$(cat ${sha256sums_file})" ]] || sha256sums_check="0"
    # Loop check file
    [[ "${sha256sums_check}" -eq "1" ]] && {
        echo -e "${INFO} Enable sha256sum checking..."

        kernel_list=("boot" "dtb-amlogic" "header" "modules")
        i="1"
        for kernel_file in ${kernel_list[*]}; do
            # Set check filename
            tmp_file="${kernel_file}-${kernel_name}.tar.gz"
            # Check if file exists
            [[ -s "${tmp_file}" ]] || error_msg "The [ ${kernel_file} ] file is missing."
            # Check if the file sha256sum is correct
            tmp_sha256sum="$(sha256sum "${tmp_file}" | awk '{print $1}')"
            tmp_checkcode="$(cat ${sha256sums_file} | grep ${tmp_file} | awk '{print $1}')"
            [[ "${tmp_sha256sum}" == "${tmp_checkcode}" ]] || error_msg "${tmp_file}: sha256sum verification failed."
            echo -e "${INFO} (${i}/4) [ ${tmp_file} ] file sha256sum check same."
            let i++
        done
    }

    sync && echo ""
}

# Update the kernel
update_kernel() {
    cd ${tmp_path}
    echo -e "${STEPS} Start unpacking the kernel..."

    # 01. For /boot five files
    rm -f /boot/config-* /boot/initrd.img-* /boot/System.map-* /boot/uInitrd-* /boot/vmlinuz-* 2>/dev/null && sync
    rm -f /boot/uInitrd /boot/zImage 2>/dev/null && sync
    #
    tar -xzf boot-${kernel_name}.tar.gz -C /boot && sync
    (
        cd /boot && cp -f uInitrd-${kernel_name} uInitrd && cp -f vmlinuz-${kernel_name} zImage && sync
        [[ "$(sha256sum uInitrd-${kernel_name} | awk '{print $1}')" == "$(sha256sum uInitrd | awk '{print $1}')" ]] || cp -f uInitrd-${kernel_name} uInitrd
        [[ "$(sha256sum vmlinuz-${kernel_name} | awk '{print $1}')" == "$(sha256sum zImage | awk '{print $1}')" ]] || cp -f vmlinuz-${kernel_name} zImage
    )
    [[ "$(ls /boot/*${kernel_name}* -l 2>/dev/null | grep "^-" | wc -l)" -ge "4" ]] || error_msg "The /boot files is missing."
    echo -e "${INFO} (1/4) Unpacking [ boot-${kernel_name}.tar.gz ] done."

    # 02. For /boot/dtb/amlogic/*
    tar -xzf dtb-amlogic-${kernel_name}.tar.gz -C /boot/dtb/amlogic && sync
    [[ "$(ls /boot/dtb/amlogic -l 2>/dev/null | grep "^-" | wc -l)" -ge "10" ]] || error_msg "/boot/dtb/amlogic file is missing."
    echo -e "${INFO} (2/4) Unpacking [ dtb-amlogic-${kernel_name}.tar.gz ] done."

    # 03. For /usr/src/linux-headers-${kernel_name}
    header_path="linux-headers-${kernel_name}"
    rm -rf /usr/src/linux-headers-* 2>/dev/null && mkdir -p "/usr/src/${header_path}" && sync
    tar -xzf header-${kernel_name}.tar.gz -C /usr/src/${header_path}
    echo -e "${INFO} (3/4) Unpacking [ header-${kernel_name}.tar.gz ] done."
    [[ -d "/usr/src/${header_path}/include" ]] || error_msg "/usr/src/${header_path}/include folder is missing."

    # 04. For /usr/lib/modules/${kernel_name}
    rm -rf /usr/lib/modules/* 2>/dev/null && sync
    tar -xzf modules-${kernel_name}.tar.gz -C /usr/lib/modules && sync
    (cd /usr/lib/modules/${kernel_name}/ && rm -f build source 2>/dev/null && ln -sf /usr/src/${header_path} build)
    [[ -d "/usr/lib/modules/${kernel_name}" ]] || error_msg "/usr/lib/modules/${kernel_name} kernel folder is missing."
    echo -e "${INFO} (4/4) Unpacking [ modules-${kernel_name}.tar.gz ] done."

    # Delete kernel tmpfiles
    rm -f *${kernel_name}*.tar.gz sha256sums 2>/dev/null

    sync && echo ""
}

# Update the uboot
update_uboot() {
    cd ${tmp_path}
    echo -e "${STEPS} Start updating the uboot..."

    # Copy u-boot.ext and u-boot.emmc
    if [[ "${K510}" -eq "1" && -n "${UBOOT_OVERLOAD}" && -f "/boot/${UBOOT_OVERLOAD}" ]]; then
        [[ ! -f "/boot/u-boot.ext" ]] && cp -f "/boot/${UBOOT_OVERLOAD}" /boot/u-boot.ext && sync && chmod +x /boot/u-boot.ext
        [[ ! -f "/boot/u-boot.emmc" ]] && cp -f "/boot/u-boot.ext" /boot/u-boot.emmc && sync && chmod +x /boot/u-boot.emmc
        echo -e "${INFO} The ${UBOOT_OVERLOAD} file copy is complete."
    fi

    # Write bootloader
    if [[ -n "${MAINLINE_UBOOT}" && -f "${MAINLINE_UBOOT}" && "${auto_mainline_uboot}" == "yes" ]]; then
        echo -e "${INFO} Write Mainline bootloader: [ ${MAINLINE_UBOOT} ]"
        dd if="${MAINLINE_UBOOT}" of="${DEV_EMMC}" conv=fsync bs=1 count=444
        dd if="${MAINLINE_UBOOT}" of="${DEV_EMMC}" conv=fsync bs=512 skip=1 seek=1
    elif [[ -n "${ANDROID_UBOOT}" && -f "${ANDROID_UBOOT}" ]]; then
        echo -e "${INFO} Write Android bootloader: [ ${ANDROID_UBOOT} ]"
        dd if="${ANDROID_UBOOT}" of="${DEV_EMMC}" conv=fsync bs=1 count=444
        dd if="${ANDROID_UBOOT}" of="${DEV_EMMC}" conv=fsync bs=512 skip=1 seek=1
    fi

    # Update ophub_release_file
    sed -i "s|^KERNEL_VERSION=.*|KERNEL_VERSION='${KERNEL_VERSION}'|g" ${ophub_release_file} 2>/dev/null
    sed -i "s|^K510=.*|K510='${K510}'|g" ${ophub_release_file} 2>/dev/null

    sync && echo ""
}

echo -e "${STEPS} Ready to update, please wait..."
# Check script permission
[[ "$(id -u)" == "0" ]] || error_msg "please run this script as root: [ sudo $0 ]"
#
# Check dependencies
check_depends
# Initialize all variables
init_var "${@}"
# Download the kernel
download_kernel
# Check kernel files list
check_kernel
# Update the kernel
update_kernel
# Update the uboot
update_uboot
#
sync && sleep 3
echo -e "${SUCCESS} Successfully updated, automatic restarting..."
reboot
exit 0
